{"version":3,"file":"stories-Carousel-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAYA;AAIA;;AAGA;AAKA;AACA;;AAGA;AAWA;AAIA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAGA","sources":["webpack://react-carousel-library-harsh/","webpack://react-carousel-library-harsh/./src/Carousel.tsx"],"sourcesContent":[null,"import React, { useRef, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nexport interface CarouselProps {\n  children: React.ReactNode;\n  isInfinite: boolean;\n  width: number;\n}\n\ninterface StyledProps {\n  width: number;\n}\n\nconst CarouselWrapper = styled.div<StyledProps>`\n  display: flex;\n  overflow: hidden;\n  position: relative;\n  width: ${(props) => `${props.width}px`};\n`;\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  transition: transform 0.3s ease-in-out;\n`;\n\nconst CarouselItem = styled.div<StyledProps>`\n  flex: 0 0 ${(props) => `${props.width}px`};\n`;\n\nconst NavButton = styled.button`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  background-color: rgba(0, 0, 0, 0.5);\n  color: white;\n  border: none;\n  cursor: pointer;\n  padding: 10px;\n`;\n\nconst PrevButton = styled(NavButton)`\n  left: 10px;\n`;\n\nconst NextButton = styled(NavButton)`\n  right: 10px;\n`;\n\nexport const Carousel: React.FC<CarouselProps> = ({ children, isInfinite, width }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState(0);\n  const [dragOffset, setDragOffset] = useState(0);\n\n  const childrenArray = React.Children.toArray(children);\n  const totalItems = childrenArray.length;\n\n  useEffect(() => {\n    if (isDragging) {\n      const handleMouseMove = (event: MouseEvent) => {\n        setDragOffset(event.clientX - dragStart);\n      };\n\n      const handleMouseUp = () => {\n        setIsDragging(false);\n        if (Math.abs(dragOffset) > width / 2) {\n          if (dragOffset > 0) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        } else {\n          setDragOffset(0);\n        }\n      };\n\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragOffset, dragStart, width]);\n\n  const nextSlide = () => {\n    setCurrentIndex((prevIndex) => {\n      if (isInfinite || prevIndex < totalItems - 1) {\n        return (prevIndex + 1) % totalItems;\n      }\n      return prevIndex;\n    });\n  };\n\n  const prevSlide = () => {\n    setCurrentIndex((prevIndex) => {\n      if (isInfinite || prevIndex > 0) {\n        return (prevIndex - 1 + totalItems) % totalItems;\n      }\n      return prevIndex;\n    });\n  };\n\n  const handleDragStart = (event: React.MouseEvent) => {\n    setIsDragging(true);\n    setDragStart(event.clientX);\n  };\n\n  const handleTouchStart = (event: React.TouchEvent) => {\n    setIsDragging(true);\n    setDragStart(event.touches[0].clientX);\n  };\n\n  const handleTouchMove = (event: React.TouchEvent) => {\n    setDragOffset(event.touches[0].clientX - dragStart);\n  };\n\n  const handleTouchEnd = () => {\n    setIsDragging(false);\n    if (Math.abs(dragOffset) > width / 2) {\n      if (dragOffset > 0) {\n        prevSlide();\n      } else {\n        nextSlide();\n      }\n    } else {\n      setDragOffset(0);\n    }\n  };\n\n  return (\n    <CarouselWrapper width={width}>\n      <CarouselContainer\n        ref={containerRef}\n        style={{\n          transform: `translateX(${-currentIndex * width + dragOffset}px)`,\n        }}\n        onMouseDown={handleDragStart}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        {childrenArray.map((child, index) => (\n          <CarouselItem key={index} width={width}>\n            {child}\n          </CarouselItem>\n        ))}\n      </CarouselContainer>\n      <PrevButton onClick={prevSlide}>&lt;</PrevButton>\n      <NextButton onClick={nextSlide}>&gt;</NextButton>\n    </CarouselWrapper>\n  );\n};\n"],"names":[],"sourceRoot":""}